// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.25.1
// source: hiscenter/hiscenter.proto

package hiscenter

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Hiscenter_Login_FullMethodName               = "/hiscenter.Hiscenter/Login"
	Hiscenter_CurrentUser_FullMethodName         = "/hiscenter.Hiscenter/CurrentUser"
	Hiscenter_Column_FullMethodName              = "/hiscenter.Hiscenter/Column"
	Hiscenter_FinanceCommon_FullMethodName       = "/hiscenter.Hiscenter/FinanceCommon"
	Hiscenter_Balance_FullMethodName             = "/hiscenter.Hiscenter/Balance"
	Hiscenter_Income_FullMethodName              = "/hiscenter.Hiscenter/Income"
	Hiscenter_Cashflow_FullMethodName            = "/hiscenter.Hiscenter/Cashflow"
	Hiscenter_PerformanceLetters_FullMethodName  = "/hiscenter.Hiscenter/PerformanceLetters"
	Hiscenter_PerformanceForecast_FullMethodName = "/hiscenter.Hiscenter/PerformanceForecast"
	Hiscenter_FinIndicator_FullMethodName        = "/hiscenter.Hiscenter/FinIndicator"
	Hiscenter_Candle_FullMethodName              = "/hiscenter.Hiscenter/Candle"
	Hiscenter_Alpha101_FullMethodName            = "/hiscenter.Hiscenter/Alpha101"
	Hiscenter_Xbzq191Alpha_FullMethodName        = "/hiscenter.Hiscenter/Xbzq191alpha"
	Hiscenter_Calendar_FullMethodName            = "/hiscenter.Hiscenter/Calendar"
	Hiscenter_IsTrading_FullMethodName           = "/hiscenter.Hiscenter/IsTrading"
	Hiscenter_Lv1Snapshot_FullMethodName         = "/hiscenter.Hiscenter/Lv1Snapshot"
	Hiscenter_Security_FullMethodName            = "/hiscenter.Hiscenter/Security"
	Hiscenter_Lv2Snapshot_FullMethodName         = "/hiscenter.Hiscenter/Lv2Snapshot"
	Hiscenter_Lv2Trade_FullMethodName            = "/hiscenter.Hiscenter/Lv2Trade"
	Hiscenter_Lv2Entrust_FullMethodName          = "/hiscenter.Hiscenter/Lv2Entrust"
	Hiscenter_Replay_FullMethodName              = "/hiscenter.Hiscenter/Replay"
	Hiscenter_DownloadCandle_FullMethodName      = "/hiscenter.Hiscenter/DownloadCandle"
	Hiscenter_Timeline_FullMethodName            = "/hiscenter.Hiscenter/Timeline"
	Hiscenter_Bargain_FullMethodName             = "/hiscenter.Hiscenter/Bargain"
)

// HiscenterClient is the client API for Hiscenter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HiscenterClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error)
	CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*Response, error)
	Column(ctx context.Context, in *ColumnRequest, opts ...grpc.CallOption) (*Response, error)
	FinanceCommon(ctx context.Context, in *FinanceCommonRequest, opts ...grpc.CallOption) (*Response, error)
	Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*Response, error)
	Income(ctx context.Context, in *IncomeRequest, opts ...grpc.CallOption) (*Response, error)
	Cashflow(ctx context.Context, in *CashflowRequest, opts ...grpc.CallOption) (*Response, error)
	PerformanceLetters(ctx context.Context, in *PerformanceLettersRequest, opts ...grpc.CallOption) (*Response, error)
	PerformanceForecast(ctx context.Context, in *PerformanceForecastRequest, opts ...grpc.CallOption) (*Response, error)
	FinIndicator(ctx context.Context, in *FinIndicatorRequest, opts ...grpc.CallOption) (*Response, error)
	Candle(ctx context.Context, in *CandleRequest, opts ...grpc.CallOption) (*Response, error)
	Alpha101(ctx context.Context, in *Alpha101Request, opts ...grpc.CallOption) (*Response, error)
	Xbzq191Alpha(ctx context.Context, in *Xbzq191AlphaRequest, opts ...grpc.CallOption) (*Response, error)
	Calendar(ctx context.Context, in *CalendarRequest, opts ...grpc.CallOption) (*Response, error)
	IsTrading(ctx context.Context, in *IsTradingRequest, opts ...grpc.CallOption) (*Response, error)
	Lv1Snapshot(ctx context.Context, in *Lv1SnapshotRequest, opts ...grpc.CallOption) (*Response, error)
	Security(ctx context.Context, in *SecurityRequest, opts ...grpc.CallOption) (*Response, error)
	Lv2Snapshot(ctx context.Context, in *Lv2SnapshotRequest, opts ...grpc.CallOption) (*Response, error)
	Lv2Trade(ctx context.Context, in *Lv2TradeRequest, opts ...grpc.CallOption) (*Response, error)
	Lv2Entrust(ctx context.Context, in *Lv2EntrustRequest, opts ...grpc.CallOption) (*Response, error)
	Replay(ctx context.Context, in *ReplayRequest, opts ...grpc.CallOption) (Hiscenter_ReplayClient, error)
	DownloadCandle(ctx context.Context, in *DownloadCandleRequest, opts ...grpc.CallOption) (Hiscenter_DownloadCandleClient, error)
	Timeline(ctx context.Context, in *TimelineRequest, opts ...grpc.CallOption) (*Response, error)
	Bargain(ctx context.Context, in *BargainRequest, opts ...grpc.CallOption) (*Response, error)
}

type hiscenterClient struct {
	cc grpc.ClientConnInterface
}

func NewHiscenterClient(cc grpc.ClientConnInterface) HiscenterClient {
	return &hiscenterClient{cc}
}

func (c *hiscenterClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Login_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) CurrentUser(ctx context.Context, in *CurrentUserRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_CurrentUser_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Column(ctx context.Context, in *ColumnRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Column_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) FinanceCommon(ctx context.Context, in *FinanceCommonRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_FinanceCommon_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Balance(ctx context.Context, in *BalanceRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Balance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Income(ctx context.Context, in *IncomeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Income_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Cashflow(ctx context.Context, in *CashflowRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Cashflow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) PerformanceLetters(ctx context.Context, in *PerformanceLettersRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_PerformanceLetters_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) PerformanceForecast(ctx context.Context, in *PerformanceForecastRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_PerformanceForecast_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) FinIndicator(ctx context.Context, in *FinIndicatorRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_FinIndicator_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Candle(ctx context.Context, in *CandleRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Candle_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Alpha101(ctx context.Context, in *Alpha101Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Alpha101_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Xbzq191Alpha(ctx context.Context, in *Xbzq191AlphaRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Xbzq191Alpha_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Calendar(ctx context.Context, in *CalendarRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Calendar_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) IsTrading(ctx context.Context, in *IsTradingRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_IsTrading_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Lv1Snapshot(ctx context.Context, in *Lv1SnapshotRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Lv1Snapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Security(ctx context.Context, in *SecurityRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Security_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Lv2Snapshot(ctx context.Context, in *Lv2SnapshotRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Lv2Snapshot_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Lv2Trade(ctx context.Context, in *Lv2TradeRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Lv2Trade_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Lv2Entrust(ctx context.Context, in *Lv2EntrustRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Lv2Entrust_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Replay(ctx context.Context, in *ReplayRequest, opts ...grpc.CallOption) (Hiscenter_ReplayClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hiscenter_ServiceDesc.Streams[0], Hiscenter_Replay_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hiscenterReplayClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hiscenter_ReplayClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type hiscenterReplayClient struct {
	grpc.ClientStream
}

func (x *hiscenterReplayClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hiscenterClient) DownloadCandle(ctx context.Context, in *DownloadCandleRequest, opts ...grpc.CallOption) (Hiscenter_DownloadCandleClient, error) {
	stream, err := c.cc.NewStream(ctx, &Hiscenter_ServiceDesc.Streams[1], Hiscenter_DownloadCandle_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &hiscenterDownloadCandleClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Hiscenter_DownloadCandleClient interface {
	Recv() (*Response, error)
	grpc.ClientStream
}

type hiscenterDownloadCandleClient struct {
	grpc.ClientStream
}

func (x *hiscenterDownloadCandleClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *hiscenterClient) Timeline(ctx context.Context, in *TimelineRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Timeline_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hiscenterClient) Bargain(ctx context.Context, in *BargainRequest, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, Hiscenter_Bargain_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HiscenterServer is the server API for Hiscenter service.
// All implementations must embed UnimplementedHiscenterServer
// for forward compatibility
type HiscenterServer interface {
	Login(context.Context, *LoginRequest) (*Response, error)
	CurrentUser(context.Context, *CurrentUserRequest) (*Response, error)
	Column(context.Context, *ColumnRequest) (*Response, error)
	FinanceCommon(context.Context, *FinanceCommonRequest) (*Response, error)
	Balance(context.Context, *BalanceRequest) (*Response, error)
	Income(context.Context, *IncomeRequest) (*Response, error)
	Cashflow(context.Context, *CashflowRequest) (*Response, error)
	PerformanceLetters(context.Context, *PerformanceLettersRequest) (*Response, error)
	PerformanceForecast(context.Context, *PerformanceForecastRequest) (*Response, error)
	FinIndicator(context.Context, *FinIndicatorRequest) (*Response, error)
	Candle(context.Context, *CandleRequest) (*Response, error)
	Alpha101(context.Context, *Alpha101Request) (*Response, error)
	Xbzq191Alpha(context.Context, *Xbzq191AlphaRequest) (*Response, error)
	Calendar(context.Context, *CalendarRequest) (*Response, error)
	IsTrading(context.Context, *IsTradingRequest) (*Response, error)
	Lv1Snapshot(context.Context, *Lv1SnapshotRequest) (*Response, error)
	Security(context.Context, *SecurityRequest) (*Response, error)
	Lv2Snapshot(context.Context, *Lv2SnapshotRequest) (*Response, error)
	Lv2Trade(context.Context, *Lv2TradeRequest) (*Response, error)
	Lv2Entrust(context.Context, *Lv2EntrustRequest) (*Response, error)
	Replay(*ReplayRequest, Hiscenter_ReplayServer) error
	DownloadCandle(*DownloadCandleRequest, Hiscenter_DownloadCandleServer) error
	Timeline(context.Context, *TimelineRequest) (*Response, error)
	Bargain(context.Context, *BargainRequest) (*Response, error)
	mustEmbedUnimplementedHiscenterServer()
}

// UnimplementedHiscenterServer must be embedded to have forward compatible implementations.
type UnimplementedHiscenterServer struct {
}

func (UnimplementedHiscenterServer) Login(context.Context, *LoginRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedHiscenterServer) CurrentUser(context.Context, *CurrentUserRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CurrentUser not implemented")
}
func (UnimplementedHiscenterServer) Column(context.Context, *ColumnRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Column not implemented")
}
func (UnimplementedHiscenterServer) FinanceCommon(context.Context, *FinanceCommonRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinanceCommon not implemented")
}
func (UnimplementedHiscenterServer) Balance(context.Context, *BalanceRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Balance not implemented")
}
func (UnimplementedHiscenterServer) Income(context.Context, *IncomeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Income not implemented")
}
func (UnimplementedHiscenterServer) Cashflow(context.Context, *CashflowRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Cashflow not implemented")
}
func (UnimplementedHiscenterServer) PerformanceLetters(context.Context, *PerformanceLettersRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformanceLetters not implemented")
}
func (UnimplementedHiscenterServer) PerformanceForecast(context.Context, *PerformanceForecastRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PerformanceForecast not implemented")
}
func (UnimplementedHiscenterServer) FinIndicator(context.Context, *FinIndicatorRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FinIndicator not implemented")
}
func (UnimplementedHiscenterServer) Candle(context.Context, *CandleRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Candle not implemented")
}
func (UnimplementedHiscenterServer) Alpha101(context.Context, *Alpha101Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Alpha101 not implemented")
}
func (UnimplementedHiscenterServer) Xbzq191Alpha(context.Context, *Xbzq191AlphaRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Xbzq191Alpha not implemented")
}
func (UnimplementedHiscenterServer) Calendar(context.Context, *CalendarRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Calendar not implemented")
}
func (UnimplementedHiscenterServer) IsTrading(context.Context, *IsTradingRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsTrading not implemented")
}
func (UnimplementedHiscenterServer) Lv1Snapshot(context.Context, *Lv1SnapshotRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lv1Snapshot not implemented")
}
func (UnimplementedHiscenterServer) Security(context.Context, *SecurityRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Security not implemented")
}
func (UnimplementedHiscenterServer) Lv2Snapshot(context.Context, *Lv2SnapshotRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lv2Snapshot not implemented")
}
func (UnimplementedHiscenterServer) Lv2Trade(context.Context, *Lv2TradeRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lv2Trade not implemented")
}
func (UnimplementedHiscenterServer) Lv2Entrust(context.Context, *Lv2EntrustRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lv2Entrust not implemented")
}
func (UnimplementedHiscenterServer) Replay(*ReplayRequest, Hiscenter_ReplayServer) error {
	return status.Errorf(codes.Unimplemented, "method Replay not implemented")
}
func (UnimplementedHiscenterServer) DownloadCandle(*DownloadCandleRequest, Hiscenter_DownloadCandleServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadCandle not implemented")
}
func (UnimplementedHiscenterServer) Timeline(context.Context, *TimelineRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timeline not implemented")
}
func (UnimplementedHiscenterServer) Bargain(context.Context, *BargainRequest) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Bargain not implemented")
}
func (UnimplementedHiscenterServer) mustEmbedUnimplementedHiscenterServer() {}

// UnsafeHiscenterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HiscenterServer will
// result in compilation errors.
type UnsafeHiscenterServer interface {
	mustEmbedUnimplementedHiscenterServer()
}

func RegisterHiscenterServer(s grpc.ServiceRegistrar, srv HiscenterServer) {
	s.RegisterService(&Hiscenter_ServiceDesc, srv)
}

func _Hiscenter_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Login_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_CurrentUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CurrentUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).CurrentUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_CurrentUser_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).CurrentUser(ctx, req.(*CurrentUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Column_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Column(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Column_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Column(ctx, req.(*ColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_FinanceCommon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinanceCommonRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).FinanceCommon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_FinanceCommon_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).FinanceCommon(ctx, req.(*FinanceCommonRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Balance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Balance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Balance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Balance(ctx, req.(*BalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Income_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncomeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Income(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Income_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Income(ctx, req.(*IncomeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Cashflow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CashflowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Cashflow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Cashflow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Cashflow(ctx, req.(*CashflowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_PerformanceLetters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformanceLettersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).PerformanceLetters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_PerformanceLetters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).PerformanceLetters(ctx, req.(*PerformanceLettersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_PerformanceForecast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PerformanceForecastRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).PerformanceForecast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_PerformanceForecast_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).PerformanceForecast(ctx, req.(*PerformanceForecastRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_FinIndicator_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinIndicatorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).FinIndicator(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_FinIndicator_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).FinIndicator(ctx, req.(*FinIndicatorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Candle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CandleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Candle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Candle_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Candle(ctx, req.(*CandleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Alpha101_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Alpha101Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Alpha101(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Alpha101_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Alpha101(ctx, req.(*Alpha101Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Xbzq191Alpha_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Xbzq191AlphaRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Xbzq191Alpha(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Xbzq191Alpha_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Xbzq191Alpha(ctx, req.(*Xbzq191AlphaRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Calendar_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalendarRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Calendar(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Calendar_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Calendar(ctx, req.(*CalendarRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_IsTrading_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsTradingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).IsTrading(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_IsTrading_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).IsTrading(ctx, req.(*IsTradingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Lv1Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lv1SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Lv1Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Lv1Snapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Lv1Snapshot(ctx, req.(*Lv1SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Security_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecurityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Security(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Security_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Security(ctx, req.(*SecurityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Lv2Snapshot_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lv2SnapshotRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Lv2Snapshot(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Lv2Snapshot_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Lv2Snapshot(ctx, req.(*Lv2SnapshotRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Lv2Trade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lv2TradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Lv2Trade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Lv2Trade_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Lv2Trade(ctx, req.(*Lv2TradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Lv2Entrust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Lv2EntrustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Lv2Entrust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Lv2Entrust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Lv2Entrust(ctx, req.(*Lv2EntrustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Replay_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReplayRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HiscenterServer).Replay(m, &hiscenterReplayServer{stream})
}

type Hiscenter_ReplayServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type hiscenterReplayServer struct {
	grpc.ServerStream
}

func (x *hiscenterReplayServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Hiscenter_DownloadCandle_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadCandleRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(HiscenterServer).DownloadCandle(m, &hiscenterDownloadCandleServer{stream})
}

type Hiscenter_DownloadCandleServer interface {
	Send(*Response) error
	grpc.ServerStream
}

type hiscenterDownloadCandleServer struct {
	grpc.ServerStream
}

func (x *hiscenterDownloadCandleServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func _Hiscenter_Timeline_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TimelineRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Timeline(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Timeline_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Timeline(ctx, req.(*TimelineRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Hiscenter_Bargain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BargainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HiscenterServer).Bargain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Hiscenter_Bargain_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HiscenterServer).Bargain(ctx, req.(*BargainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Hiscenter_ServiceDesc is the grpc.ServiceDesc for Hiscenter service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Hiscenter_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "hiscenter.Hiscenter",
	HandlerType: (*HiscenterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Hiscenter_Login_Handler,
		},
		{
			MethodName: "CurrentUser",
			Handler:    _Hiscenter_CurrentUser_Handler,
		},
		{
			MethodName: "Column",
			Handler:    _Hiscenter_Column_Handler,
		},
		{
			MethodName: "FinanceCommon",
			Handler:    _Hiscenter_FinanceCommon_Handler,
		},
		{
			MethodName: "Balance",
			Handler:    _Hiscenter_Balance_Handler,
		},
		{
			MethodName: "Income",
			Handler:    _Hiscenter_Income_Handler,
		},
		{
			MethodName: "Cashflow",
			Handler:    _Hiscenter_Cashflow_Handler,
		},
		{
			MethodName: "PerformanceLetters",
			Handler:    _Hiscenter_PerformanceLetters_Handler,
		},
		{
			MethodName: "PerformanceForecast",
			Handler:    _Hiscenter_PerformanceForecast_Handler,
		},
		{
			MethodName: "FinIndicator",
			Handler:    _Hiscenter_FinIndicator_Handler,
		},
		{
			MethodName: "Candle",
			Handler:    _Hiscenter_Candle_Handler,
		},
		{
			MethodName: "Alpha101",
			Handler:    _Hiscenter_Alpha101_Handler,
		},
		{
			MethodName: "Xbzq191alpha",
			Handler:    _Hiscenter_Xbzq191Alpha_Handler,
		},
		{
			MethodName: "Calendar",
			Handler:    _Hiscenter_Calendar_Handler,
		},
		{
			MethodName: "IsTrading",
			Handler:    _Hiscenter_IsTrading_Handler,
		},
		{
			MethodName: "Lv1Snapshot",
			Handler:    _Hiscenter_Lv1Snapshot_Handler,
		},
		{
			MethodName: "Security",
			Handler:    _Hiscenter_Security_Handler,
		},
		{
			MethodName: "Lv2Snapshot",
			Handler:    _Hiscenter_Lv2Snapshot_Handler,
		},
		{
			MethodName: "Lv2Trade",
			Handler:    _Hiscenter_Lv2Trade_Handler,
		},
		{
			MethodName: "Lv2Entrust",
			Handler:    _Hiscenter_Lv2Entrust_Handler,
		},
		{
			MethodName: "Timeline",
			Handler:    _Hiscenter_Timeline_Handler,
		},
		{
			MethodName: "Bargain",
			Handler:    _Hiscenter_Bargain_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Replay",
			Handler:       _Hiscenter_Replay_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DownloadCandle",
			Handler:       _Hiscenter_DownloadCandle_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "hiscenter/hiscenter.proto",
}
